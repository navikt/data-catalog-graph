swagger: "2.0"
info:
  description: Datacatalog metadata repository
  version: "0.0.1"
  title: Datacatalog metadata
consumes:
  - application/json
produces:
  - application/json

basePath: /api

definitions:
    Node:
      title: Node
      description: A node
      required:
        - prop
        - type
      properties:
        id:
          type: integer
          description: Unique node id
        prop:
          type: string
          description: JSON payload
          example: "{'id': 'PII.PURPOSE.PENSJON'}"
        schema:
          type: string
          description: Origin of the prop
        prop_id:
          type: string
          description: id of the prop
        type:
          type: string
          description: type of the prop
        valid_from:
          type: string
          description: When the node was created
          example: "2019-11-20 14:55:54.160288"
        valid_to:
          type: string
          description: When the node was created
          example: "2019-11-20 14:55:54.160288"
        valid:
          type: boolean
          description: When the node was created
          example: "2019-11-20 14:55:54.160288"

    Edge:
      title: Edge
      description: Edge for nodes
      required:
        - n1
        - n2
        - prop
      properties:
        n1:
          type: integer
          description: id of source node
          example: 259
        n2:
          type: integer
          description: id of target node
          example: 260
        prop:
          type: string
          description: props array (json)
          example: "['belongs to']"
        created:
          type: string
          description: When the edge was created
          example: "2019-11-20 14:55:54.160288"

    EdgeWithNode:
      title: Edge
      description: Edge for nodes
      required:
        - prop
        - source_node
        - target_node
        - edge_prop
      properties:
        id:
          type: integer
          description: Unique node id
        prop:
          type: string
          description: JSON payload
          example: "{'id': 'PII.PURPOSE.PENSJON'}"
        created:
          type: string
          description: When the node was created
          example: "2019-11-20 14:55:54.160288"
        source_node:
          type: integer
          description: id of source node
          example: 259
        target_node:
          type: integer
          description: id of target node
          example: 260
        edge_prop:
          type: string
          description: props array (json)
          example: "['belongs to']"
        edge_created:
          type: string
          description: When the edge was created
          example: "2019-11-20 14:55:54.160288"

# Paths supported by the server application
paths:

  /terms:
    get:
      operationId: term.get_all
      tags:
        - Terms
      summary: Read the entire list of term nodes
      description: Read the list of term nodes
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of term nodes to get from nodes
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering nodes
          required: false
      responses:
        200:
          description: Successfully read nodes list operation
          schema:
            $ref: '#/definitions/Node'

  /terms/search:
    get:
      operationId: term.search_term_by_name
      tags:
        - Terms
      summary: Search for a term by name
      description: Searches the table for a term based on the name
      parameters:
        - name: term_name
          in: query
          type: string
          description: Term name
          required: true
        - name: term_status
          in: query
          type: string
          description: Term status
          required: false
      responses:
        200:
          description: Successfully read nodes list operation
          schema:
            $ref: '#/definitions/Node'

  /concepts:
    get:
      operationId: concept.read_all
      tags:
        - Concepts
      summary: Read the entire list of concept nodes
      description: Read the entire list of concept nodes
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of concept nodes to get from nodes
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering nodes
          required: false
      responses:
        200:
          description: Successfully read nodes list operation
          schema:
            $ref: '#/definitions/Node'

  /purposes:
    get:
      operationId: purpose.read_all
      tags:
        - Purpose
      summary: Read the entire list of purpose nodes
      description: Read the entire list of purpose nodes
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of purpose nodes to get from nodes
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering nodes
          required: false
      responses:
        200:
          description: Successfully read nodes list operation
          schema:
            $ref: '#/definitions/Node'

  /nodes:
    get:
      operationId: node.get_all
      tags:
        - Nodes
      summary: Read the entire list of nodes
      description: Read the list of nodes
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of nodes to get from nodes
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering nodes
          required: false
      responses:
        200:
          description: Successfully read nodes list operation
          schema:
            $ref: '#/definitions/Node'

    post:
      operationId: node.create
      tags:
        - Nodes
      summary: Create a node
      description: Create a node
      parameters:
        - name: node
          in: body
          description: Node to create
          required: True
          schema:
            type: array
            items:
              type: object
              properties:
                prop:
                  type: object
                  description: Node properties
      responses:
        201:
          description: Successfully created new node
    
    put:
      operationId: node.update
      tags:
        - Nodes
      summary: Update a node
      description: Update a node
      parameters:
        - name: node
          in: body
          description: Node to create
          required: True
          schema:
            type: array
            items:
              type: object
              properties:
                prop:
                  type: object
                  description: Node properties
      responses:
        200:
          description: Successfully updated node

  /node/{prop_id}:
    delete:
      operationId: node.delete
      tags:
        - Nodes
      summary: Delete a node
      description: Delete a node
      parameters:
        - name: prop_id
          in: path
          type: string
          required: True
      responses:
        200:
          description: Successfully deleted the node

  /node/{id}:
    get:
      operationId: node.get_by_id
      tags:
        - Nodes
      summary: Get node by id
      description: Get node by id
      parameters:
        - name: id
          in: path
          description: id of the node
          type: integer
          required: True
      responses:
        200:
          description: Node found
          schema:
            $ref: '#/definitions/Node'

  /node/{guid}:
    get:
      operationId: node.get_by_guid
      tags:
        - Nodes
      summary: Get node by guid
      description: Get node by guid
      parameters:
        - name: guid
          in: path
          description: guid of the node
          type: string
          required: True
      responses:
        200:
          description: Node found
          schema:
            $ref: '#/definitions/Node'
    
  /node/prop/{id}:
    get:
      operationId: node.get_by_prop_id
      tags:
        - Nodes
      summary: Get node by id
      description: Get node by id
      parameters:
        - name: id
          in: path
          description: id of the node
          type: string
          required: True
      responses:
        200:
          description: Node found
          schema:
            $ref: '#/definitions/Node'

  /node/search/{id_pattern}:
    get:
      operationId: node.get_all_nodes_by_pattern
      tags:
        - Nodes
      summary: Get nodes by prop_id start pattern
      description: Get nodes by prop_id start pattern
      parameters:
        - name: id_pattern
          in: path
          description: pattern for id of the node
          type: string
          required: True
      responses:
        200:
          description: Node found
          schema:
            $ref: '#/definitions/Node'

  /edges:
    get:
      operationId: edge.get_all
      tags:
        - Edges
      summary: Get all edges
      description: Get all edges
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of edges to get from edges
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering edges
          required: false
      responses:
        200:
          description: Successfully read edges list operation
          schema:
            $ref: '#/definitions/Edge'

    put:
      operationId: edge.update
      tags:
        - Edges
      summary: Update a edge
      description: Update a edge or create new edge if the edge does not exist
      parameters:
        - name: edges
          in: body
          description: Edge to update or create
          required: True
          schema:
            type: array
            items:
              type: object
              properties:
                n1:
                  type: string
                  description: Node prop_id property
                n2:
                  type: string
                  description: Node prop_id property
                prop:
                  type: object
                  description: prop containing edge description
      responses:
        200:
          description: Successfully updated edges

  /edges/{node_id}:
    get:
      operationId: edge.get_all_edges_of_node
      tags:
        - Edges
      summary: Get all edges connected to node with id
      description: Get all edges connected to node with id
      parameters:
        - name: node_id
          in: path
          description: id of source node
          type: integer
          required: True
      responses:
        200:
          description: All edges found connected to node
          schema:
            $ref: '#/definitions/Edge'

  /edges/{guid}:
    delete:
      operationId: edge.delete
      tags:
        - Edges
      summary: Delete edge based on guid
      description: Delete edge based on guid
      parameters:
        - name: guid
          in: path
          description: id of the edge
          type: string
          required: True
      responses:
        200:
          description: Edge deleted

  /edges/source/{node_id}:
    get:
      operationId: edge.get_all_edges_of_source_node
      tags:
        - Edges
      summary: Get all edges connected to source node with id
      description: Get all edges connected to source node with id
      parameters:
        - name: node_id
          in: path
          description: node_id
          type: integer
          required: True
      responses:
        200:
          description: All edges found connected to source node
          schema:
            $ref: '#/definitions/EdgeWithNode'
  /edges/target/{node_id}:
    get:
      operationId: edge.get_all_edges_of_target_node
      tags:
        - Edges
      summary: Get all edges connected to target node with id
      description: Get all edges connected to target node with id
      parameters:
        - name: node_id
          in: path
          description: node_id
          type: string
          required: True
      responses:
        200:
          description: All edges found connected to target node
          schema:
            $ref: '#/definitions/Edge'