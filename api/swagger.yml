swagger: "2.0"
info:
  description: Datacatalog metadata repository
  version: "0.0.1"
  title: Datacatalog metadata
consumes:
  - application/json
produces:
  - application/json

basePath: /api

definitions:
    Node:
      title: Node
      description: A node
      required:
        - prop
        - prop_id
      properties:
        id:
          type: integer
          description: Unique node id
        prop_id:
          type: string
          example: "test_prop_id.2131234"
        prop:
          type: dict
          description: JSON payload
          example: "{'id': 'PII.PURPOSE.PENSJON'}" 
        created:
          type: string
          description: When the node was created
          example: "2019-11-20 14:55:54.160288"

# Paths supported by the server application
paths:

  /terms:
    get:
      operationId: term.read_all
      tags:
        - Terms
      summary: Read the entire list of term nodes
      description: Read the list of term nodes
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of term nodes to get from nodes
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering nodes
          required: false
      responses:
        200:
          description: Successfully read nodes list operation
          schema:
            $ref: '#/definitions/Node'

  /concepts:
    get:
      operationId: concept.read_all
      tags:
        - Concepts
      summary: Read the entire list of concept nodes
      description: Read the entire list of concept nodes
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of concept nodes to get from nodes
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering nodes
          required: false
      responses:
        200:
          description: Successfully read nodes list operation
          schema:
            $ref: '#/definitions/Node'

  /purposes:
    get:
      operationId: purpose.read_all
      tags:
        - Purpose
      summary: Read the entire list of purpose nodes
      description: Read the entire list of purpose nodes
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of purpose nodes to get from nodes
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering nodes
          required: false
      responses:
        200:
          description: Successfully read nodes list operation
          schema:
            $ref: '#/definitions/Node'

  /nodes:
    get:
      operationId: node.read_all
      tags:
        - Nodes
      summary: Read the entire list of nodes
      description: Read the list of nodes
      parameters:
        - name: length
          in: query
          type: integer
          description: Number of nodes to get from nodes
          required: false
        - name: offset
          in: query
          type: integer
          description: Offset from beginning of list where to start gathering nodes
          required: false
      responses:
        200:
          description: Successfully read nodes list operation
          schema:
            $ref: '#/definitions/Node'

    post:
      operationId: node.create
      tags:
        - Node
      summary: Create a node
      description: Create a node
      parameters:
        - name: node
          in: body
          description: Node to create
          required: True
          schema:
            type: array
            items:
              type: object
              properties:
                prop:
                  type: object
                  description: Node properties
      responses:
        201:
          description: Successfully created new node
    
    put:
      operationId: node.update
      tags:
        - Node
      summary: Update a node
      description: Update a node
      parameters:
        - name: node
          in: body
          description: Node to create
          required: True
          schema:
            type: array
            items:
              type: object
              properties:
                prop:
                  type: object
                  description: Node properties
      responses:
        200:
          description: Successfully updated node
  /node/{prop_id}:
    delete:
      operationId: node.delete
      tags:
        - Nodes
      summary: Delete a node
      description: Delete a node
      parameters:
        - name: prop_id
          in: path
          type: string
          required: True
      responses:
        200:
          description: Successfully deleted the node

  /node/{guid}:
    get:
      operationId: node.read_one 
      tags:
        - Nodes
      summary: Get node by guid
      description: Get node by guid
      parameters:
        - name: guid
          in: path
          description: guid of the node
          type: string
          required: True
      responses:
        200:
          description: Node found
          schema:
            $ref: '#/definitions/Node'
    
  /node/prop/{id}:
    get:
      operationId: node.get_by_prop_id
      tags:
        - Nodes
      summary: Get node by id
      description: Get node by id
      parameters:
        - name: id
          in: path
          description: id of the node
          type: string
          required: True
      responses:
        200:
          description: Node found
          schema:
            $ref: '#/definitions/Node'

  /edges:
    put:
      operationId: edge.update
      tags:
        - Edge
      summary: Update a edge
      description: Update a edge and create new edge if not exist
      parameters:
        - name: edge
          in: body
          description: Edge to update or create if not exist
          required: True
          schema:
            type: array
            items:
              type: object
              properties:
                n1:
                  type: string
                  description: Node prop_id property
                n2:
                  type: string
                  description: Node prop_id property
      responses:
        200:
          description: Successfully updated node
